apply plugin: 'com.palantir.conjure'
apply plugin: 'com.palantir.external-publish-conjure'
apply plugin: 'com.palantir.external-publish-custom'

dependencies {
    imiplementation 'com.fasterxml.jackson.core:jackson-databind'
    imiplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    imiplementation 'com.palantir.conjure:conjure-core'
    imiplementation 'com.palantir.conjure.java.runtime:conjure-java-jackson-serialization'
    imiplementation project("${project.name}-objects")
    imiplementation project(':test-cases-internal')
    imiplementation project(':test-cases-internal:test-cases-internal-objects')
    
    runtimeOnly 'org.slf4j:slf4j-simple'
}

// Ensure we generate definitions first before conjure tries to compile them
tasks.copyConjureSourcesIntoBuild {
    dependsOn ':test-cases-internal:generateClientServices'
}

task compileTestCasesJson(type: JavaExec) {
    description = "Generate client-specific test cases"
    main = "com.palantir.conjure.verification.client.CompileVerificationClientTestCasesJson"
    classpath = sourceSets.main.runtimeClasspath
    args rootProject.file('master-test-cases.yml'), "$buildDir/test-cases.json"

    inputs.file rootProject.file('master-test-cases.yml')
    outputs.file "$buildDir/test-cases.json"
}

build.dependsOn compileTestCasesJson
task generate(dependsOn: compileTestCasesJson)

externalPublishing {
    publication('testCases') {
        artifactId 'verification-client-test-cases'
        artifact (compileTestCasesJson.outputs.files.singleFile) {
            extension 'json'
            builtBy compileTestCasesJson
        }
    }
}
