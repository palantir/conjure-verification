apply from: "${rootDir}/gradle/publish-json-artifacts.gradle"
apply plugin: 'com.palantir.conjure'

sourceSets {
    generator
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    compile 'com.palantir.conjure:conjure-core'
    compile 'com.palantir.conjure.java.runtime:conjure-java-jackson-serialization'
    compile project("${project.name}-objects")
    compile project(':verification-api')
    compile sourceSets.generator.output

    generatorImplementation project(':verification-api')
    generatorImplementation project(':verification-api:verification-api-objects')
    generatorImplementation 'com.fasterxml.jackson.core:jackson-databind'
    generatorImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    generatorImplementation 'com.palantir.conjure.java.runtime:conjure-java-jackson-serialization'
    generatorImplementation 'com.google.guava:guava'
}

task generateConjureDefinitions(type: JavaExec) {
    description = "Generate the conjure service definition files"
    main = "com.palantir.conjure.verification.server.GenerateVerificationServerConjureDefinitions"
    classpath = sourceSets.generator.runtimeClasspath
    args rootProject.file('test-cases.yml'), 'src/main/conjure'

    inputs.file rootProject.file('test-cases.yml')
    outputs.dir 'src/main/conjure/generated'
}

tasks.copyConjureSourcesIntoBuild {
    dependsOn tasks.generateConjureDefinitions
}

task generateTestCases(type: JavaExec) {
    description = "Generate server-specific test cases"
    main = "com.palantir.conjure.verification.server.GenerateVerificationServerTestCases"
    classpath = sourceSets.main.runtimeClasspath
    args rootProject.file('test-cases.yml'), 'test-cases.yml'

    inputs.file rootProject.file('test-cases.yml')
    outputs.file 'test-cases.yml'
}

task compileTestCasesJson(type: JavaExec) {
    dependsOn 'generateTestCases'
    main = "com.palantir.conjure.verification.server.CompileVerificationServerTestCasesJson"
    classpath = sourceSets.main.runtimeClasspath

    inputs.file 'test-cases.yml'
    outputs.file "$buildDir/test-cases.json"
}

build.dependsOn compileTestCasesJson

publishing {
    publications {
        conjureIr(MavenPublication) {
            artifactId project.name
            artifact (compileIr.outputs.files.singleFile) {
                extension 'conjure.json'
                builtBy compileIr
            }
        }

        testCases(MavenPublication) {
            artifactId "verification-server-test-cases"
            artifact (compileTestCasesJson.outputs.files.singleFile) {
                extension 'json'
                builtBy compileTestCasesJson
            }
        }
    }
}
