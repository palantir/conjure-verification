###
# master-test-cases.yml contains sample strings which should either deserialize successfully or fail to
# deserialize into Conjure types specified in the examples-types.conjure.yml file.
# Run `./gradlew generate` to programmatically create corresponding Conjure YML for services.
###

body:
  # primitives
  - type: BearerTokenExample
    positive:
      - '{"value":"abc123"}'
      - '{"value":"-._~+/="}'
      - '{"value":"abc="}'
      - '{"value":"a="}'
    negative:
      - '{"value":null}'
      - '{}'
      - '{"value":" space"}'
      - '{"value":"space "}'
      - '{"value":"with space"}'
      - '{"value":""}'
      - '{"value":"#"}'
      - '{"value":" "}'
      - '{"value":"("}'
      - '{"value":"="}'
      - '{"value":"=a"}'
    # type: BinaryExample
    # negative:
    #   - '{"value":}'
  - type: BooleanExample
    positive:
        - '{"value":false}'
        - '{"value":true}'
    negative:
        - '{}'
        - '{"value":null}'
        - '{"value":0}'
        - '{"value":"true"}'
  - type: DateTimeExample
    positive:
        - '{"value":"2017-01-02T03:04:05Z"}'
        - '{"value":"2017-01-02T03:04:05.000Z"}'
        - '{"value":"2017-01-02T03:04:05.000000Z"}'
        - '{"value":"2017-01-02T03:04:05.000000000Z"}'
        - '{"value":"2017-01-02T04:04:05.000000000+01:00"}'
        - '{"value":"2017-01-02T05:04:05.000000000+02:00"}'
    negative:
        - '{"value":"4/3/2018"}'
        - '{"value":"1523040070"}'
        - '{"value":1523040070}'
        - '{"value":"2017-01-02T03:04:05.0000000000Z"}'
        - '{"value":"2017-01-02T04:04:05.000000000+01:00[Europe/Berlin]"}'
  - type: DoubleExample
    positive:
        - '{"value":1.23}'
        - '{"value":0.0}'
        - '{"value":-0.0}'
        - '{"value":13}'
        - '{"value":123e5}'
        - '{"value":123e-5}'
        - '{"value":"NaN"}'
        - '{"value":"Infinity"}'
        - '{"value":"-Infinity"}'
    negative:
        - '{"value":null}'
        - '{}'
        - '{"value":"1.23"}'
        - '{"value":"nan"}'
        - '{"value":nan}'
  - type: IntegerExample
    positive:
        - '{"value":-2147483648}'
        - '{"value":0}'
        - '{"value":2147483647}'
    negative:
        - '{"value":-2147483649}'
        - '{"value":2147483648}'
        - '{"value":null}'
        - '{}'
        - '{"value":1.23}'
        - '{"value":"12"}'
  - type: RidExample
    positive:
        - '{"value":"ri.service.instance.folder.foo"}'
        - '{"value":"ri.a1p2p3.south-west.data-set.my-hello_WORLD-123"}'
        - '{"value":"ri.my-service.instance1.graph-node.._"}'
        - '{"value":"ri.service.1instance.type.emptyname"}'
        - '{"value":"ri.my-service..graph-node.noInstance"}'
        - '{"value":"ri.my-service..graph-node.noInstance.multiple.extra.dots"}'
    negative:
        - '{"value":null}'
        - '{}'
        - '{"value":""}'
        - '{"value":"badString"}'
        - '{"value":"ri.service.CAPLOCK.type.name"}'
        - '{"value":"ri.service.instance.-123.name"}'
        - '{"value":"ri..instance.type.noService"}'
        - '{"value":"ri.service.instance.type."}'
        - '{"value":"id.bad.id.class.b.name"}'
        - '{"value":"ri:service::instance:type:name"}'
        - '{"value":"ri.service.instance.type.name!@#"}'
        - '{"value":"ri.service(name)..folder.foo"}'
  - type: SafeLongExample
    positive:
        - '{"value":-9007199254740991}'
        - '{"value":0}'
        - '{"value":9007199254740991}'
    negative:
        - '{"value":null}'
        - '{}'
        - '{"value":-9007199254740992}'
        - '{"value":9007199254740992}'
        - '{"value":1.23}'
        - '{"value":"12"}'
  - type: StringExample
    positive:
        - '{"value":"exampleOutput"}'
        - '{"value":""}'
    negative:
        - '{"value":null}'
        - '{}'
        - '{"value":8}'
  - type: UuidExample
    positive:
        - '{"value":"d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"}' # UUID v1
        - '{"value":"80e6dd13-5f42-4e33-ad18-f73875540c8b"}' # UUID v4
    negative:
        - '{"value":null}'
        - '{}'
        - '{"value":""}'
        - '{"value":"80e6dd13-5f42-4e33-ad18"}'
  - type: AnyExample
    positive:
        - '{"value":0}'
        - '{"value":"content"}'
        - '{"value":true}'
        - '{"value":[1,2,3]}'
        - '{"value":{"key":3}}'
        - '{"value":{"key":{"inner-key":[1,2,3]}}}'
    negative:
        - '{"value":null}'

  # named types
  - type: EnumExample
    positive:
        - '"ONE"'
        - '"one"'
        - '"TWO"'
        - '"two"'
        - '"ONE_HUNDRED"'
        - '"one_hundred"'
        - '"THIS_IS_UNKNOWN"'
    negative:
        - ''
        - '[]'
        - '{}'
        - '0'
        - '"!!!"'
        - '"one-hundred"'
        - 'UNQUOTED'
        - 'ONE'
        - 'one-hundred'

    # collections
  - type: ListExample
    positive:
        - '{"value":[]}'
        - '{"value":["","a","b","c","a"]}'
        - '{}'
        # - '{"value":null}'
        #   tag: "lenient"
    negative:
        - '{"value":{}}'
        # - '{"value":null}'
        #   tag: "!lenient"
  - type: SetStringExample
    positive:
        - '{"value":[]}'
        - '{"value":["","a","b","c"]}'
        - '{}'
        # - '{"value":null}'
        #   tag: "lenient"
    negative:
        # - '{"value":null}'
        #   tag: "!lenient"
        # TODO SPEC: behavior for an object declared as a "Set" that receives a list with multiple elements that are equal.
        - '{"value":["a","a"]}'
  - type: SetDoubleExample
    positive:
        - '{"value":[]}'
        - '{"value":[1.100, 1.2, 1.3]}'
        - '{}'
    negative:
        - '{"value":[1.1, 1.10, 01.100]}'
  - type: MapExample
    positive:
        - '{"value":{"key":"value","key2":"value2"}}'
        - '{}'
        - '{"value":{}}'
        # - '{"value":null}'
        #   tag: "lenient"
    negative:
        - '{"value":{"key":[1,2,3]}}'
        - '{"value":"not a map"}'
        # - '{"value":null}'
        #   tag: "!lenient"
  - type: OptionalExample
    positive:
        - '{}'
        - '{"value":null}'
        - '{"value":""}'
        - '{"value":"foo"}'
    negative:
        - '{"value":{}}'
        - '{"value":[]}'
  - type: OptionalBooleanExample
    positive:
        - '{}'
        - '{"value":null}'
        - '{"value":true}'
        - '{"value":false}'
    negative:
        - '{"value":{}}'
        - '{"value":[]}'
        - '{"value":"true"}'
  - type: OptionalIntegerExample
    positive:
        - '{}'
        - '{"value":null}'
        - '{"value":0}'
        - '{"value":1234}'
    negative:
        - '{"value":{}}'
        - '{"value":[]}'
        - '{"value":"1234"}'
  - type: LongFieldNameOptionalExample
    positive:
        - '{}'
        - '{"someLongName":null}'
        - '{"someLongName":""}'
        - '{"someLongName":"foo"}'
    negative:
        - '{"someLongName":{}}'
        - '{"someLongName":[]}'
  - type: RawOptionalExample
    positive:
        - 'null'
        - '1'
    negative:
        - '"not an integer"'

    # named aliases
  - type: StringAliasExample
    positive:
        - '"exampleOutput"'
        - '""'
    negative:
        - 'null'
        - '{}'
        - '[]'
  - type: DoubleAliasExample
    positive:
        - '10'
        - '10.0'
        - '"NaN"'
        - '"Infinity"'
        - '"-Infinity"'
    negative:
        - 'null'
        - '{}'
        - '[]'
        - '""'
        - '"nan"'
        - '"NAN"'
        - '"infinity"'
        - '"-infinity"'
        - '"+Infinity"'
  - type: IntegerAliasExample
    positive:
        - '0'
        - '123'
    negative:
        - 'null'
        - '{}'
        - '[]'
        - '""'
        - '123.4'
  - type: BooleanAliasExample
    positive:
        - 'true'
        - 'false'
    negative:
        - 'null'
        - '{}'
        - '[]'
        - '""'
  - type: SafeLongAliasExample
    positive:
        - '-9007199254740991'
        - '0'
        - '9007199254740991'
    negative:
        - '-9007199254740992'
        - '9007199254740992'
        - 'null'
        - '{}'
        - '[]'
        - '""'
  - type: RidAliasExample
    positive:
        - '"ri.service.instance.folder.foo"'
        - '"ri.a1p2p3.south-west.data-set.my-hello_WORLD-123"'
        - '"ri.my-service.instance1.graph-node.._"'
        - '"ri.service.1instance.type.emptyname"'
        - '"ri.my-service..graph-node.noInstance"'
        - '"ri.my-service..graph-node.noInstance.multiple.extra.dots"'
    negative:
        - 'null'
        - '{}'
        - '""'
        - '"badString"'
        - '"ri.service.CAPLOCK.type.name"'
        - '"ri.service.instance.-123.name"'
        - '"ri..instance.type.noService"'
        - '"ri.service.instance.type."'
        - '"id.bad.id.class.b.name"'
        - '"ri:service::instance:type:name"'
        - '"ri.service.instance.type.name!@#"'
        - '"ri.service(name)..folder.foo"'
        - '{}'
        - '[]'
        - '""'
  - type: BearerTokenAliasExample
    positive:
        - '"abc123"'
        - '"-._~+/="'
        - '"abc="'
        - '"a="'
    negative:
        - 'null'
        - '{}'
        - '[]'
        - '""'
  - type: UuidAliasExample
    positive:
        - '"d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"' # UUID v1
        - '"80e6dd13-5f42-4e33-ad18-f73875540c8b"' # UUID v4
    negative:
        - 'null'
        - '{}'
        - '[]'
        - '""'
        - '"80e6dd13-5f42-4e33-ad18"'
  - type: ReferenceAliasExample
    positive:
        - '{"value":0}'
        - '{"value":"content"}'
        - '{"value":true}'
        - '{"value":[1,2,3]}'
        - '{"value":{"key":3}}'
        - '{"value":{"key":{"inner-key":[1,2,3]}}}'
    negative:
        - 'null'
        - '{{'
  - type: DateTimeAliasExample
    positive:
        - '"2017-01-02T03:04:05Z"'
        - '"2017-01-02T03:04:05.000Z"'
        - '"2017-01-02T03:04:05.000000Z"'
        - '"2017-01-02T03:04:05.000000000Z"'
        - '"2017-01-02T04:04:05.000000000+01:00"'
        - '"2017-01-02T05:04:05.000000000+02:00"'
    negative:
        - '"4/3/2018"'
        - '"1523040070"'
        - '"1523040070'
        - '"2017-01-02T03:04:05.0000000000Z"'
        - '"2017-01-02T04:04:05.000000000+01:00[Europe/Berlin]"'
        - 'null'
        - '{}'
        - '[]'
        - '""'
    # receiveBinaryAliasExample:
    # positive:
    #     - ''
    # negative:
    #     - 'null'
    #     - '{}'
    #     - '[]'
    #     - '""'
  - type: KebabCaseObjectExample
    positive:
        - '{"kebab-cased-field":1}'
    negative:
        - '{"kebabCasedField":1}'
        - '{"kebab_cased_field":1}'
  - type: SnakeCaseObjectExample
    positive:
        - '{"snake_cased_field":1}'
    negative:
        - '{"snakeCasedField":1}'
        - '{"snake-cased-field":1}'
  - type: OptionalBearerTokenAliasExample
    positive:
        - 'null'
        - '"abc123"'
        - '"-._~+/="'
        - '"abc="'
        - '"a="'
    negative:
        - '{}'
        - '[]'
  - type: OptionalBinaryAliasExample
    positive:
        - 'null'
        # TODO(dfox): binary alias?
    negative:
        - '{}'
        - '[]'
  - type: OptionalBooleanAliasExample
    positive:
        - 'null'
        - 'true'
        - 'false'
    negative:
        - '{}'
        - '[]'
  - type: OptionalDateTimeAliasExample
    positive:
        - 'null'
        - '"2017-01-02T03:04:05Z"'
    negative:
        - '{}'
        - '[]'
  - type: OptionalDoubleAliasExample
    positive:
        - 'null'
        - '10'
        - '10.0'
        - '"NaN"'
        - '"Infinity"'
        - '"-Infinity"'
    negative:
        - '{}'
        - '[]'
  - type: OptionalIntegerAliasExample
    positive:
        - 'null'
        - '0'
        - '123'
    negative:
        - '{}'
        - '[]'
  - type: OptionalRidAliasExample
    positive:
        - 'null'
        - '"ri.service.instance.folder.foo"'
    negative:
        - '{}'
        - '[]'
  - type: OptionalSafeLongAliasExample
    positive:
        - 'null'
        - '-9007199254740991'
        - '0'
        - '9007199254740991'
    negative:
        - '{}'
        - '[]'
  - type: OptionalStringAliasExample
    positive:
        - 'null'
        - '""'
        - '"hello"'
    negative:
        - '{}'
        - '[]'
  - type: OptionalUuidAliasExample
    positive:
        - 'null'
        - '"d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"'
        - '"80e6dd13-5f42-4e33-ad18-f73875540c8b"'
    negative:
        - '{}'
        - '[]'
  - type: OptionalAnyAliasExample
    positive:
        - 'null'
        - '0'
        - '"content"'
        - 'true'
        - '[1,2,3]'
        - '{"key":3}'
    negative: []
  - type: ListBearerTokenAliasExample
    positive:
        - '[]'
        - '["abc123"]'
    negative:
        - 'null'
  - type: ListBinaryAliasExample
    positive:
        - '[]'
        - '["", "SGVsbG8sIFdvcmxk"]'
    negative:
        - 'null'
  - type: ListBooleanAliasExample
    positive:
        - '[]'
        - '[true]'
    negative:
        - 'null'
  - type: ListDateTimeAliasExample
    positive:
        - '[]'
        - '["2017-01-02T03:04:05Z"]'
    negative:
        - 'null'
  - type: ListDoubleAliasExample
    positive:
        - '[]'
        - '[10, 10.0, "NaN", "Infinity", "-Infinity"]'
    negative:
        - 'null'
  - type: ListIntegerAliasExample
    positive:
        - '[]'
        - '[0, 123]'
    negative:
        - 'null'
  - type: ListRidAliasExample
    positive:
        - '[]'
        - '["ri.service.instance.folder.foo"]'
    negative:
        - 'null'
  - type: ListSafeLongAliasExample
    positive:
        - '[]'
        - '[-9007199254740991, 0, 9007199254740991]'
    negative:
        - 'null'
  - type: ListStringAliasExample
    positive:
        - '[]'
        - '["", "hello"]'
    negative:
        - 'null'
  - type: ListUuidAliasExample
    positive:
        - '[]'
        - '["d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"]'
    negative:
        - 'null'
  - type: ListAnyAliasExample
    positive:
        - '[]'
        - '[null, 0, "content", true, [1,2,3], {"key":3}]'
    negative:
        - 'null'
  - type: SetBearerTokenAliasExample
    positive:
        - '[]'
        - '["abc123"]'
    negative:
        - 'null'
  - type: SetBinaryAliasExample
    positive:
        - '[]'
        - '["", "SGVsbG8sIFdvcmxk"]'
    negative:
        - 'null'
  - type: SetBooleanAliasExample
    positive:
        - '[]'
        - '[true]'
    negative:
        - 'null'
  - type: SetDateTimeAliasExample
    positive:
        - '[]'
        - '["2017-01-02T03:04:05Z"]'
    negative:
        - 'null'
  - type: SetDoubleAliasExample
    positive:
        - '[]'
        - '[100, 10.0, "NaN", "Infinity", "-Infinity"]'
        # https://github.com/palantir/conjure-verification/issues/72
        # - '[+0, -0]'
    negative:
        - 'null'
  - type: SetIntegerAliasExample
    positive:
        - '[]'
        - '[0, 123]'
    negative:
        - 'null'
  - type: SetRidAliasExample
    positive:
        - '[]'
        - '["ri.service.instance.folder.foo"]'
    negative:
        - 'null'
  - type: SetSafeLongAliasExample
    positive:
        - '[]'
        - '[-9007199254740991, 0, 9007199254740991]'
    negative:
        - 'null'
  - type: SetStringAliasExample
    positive:
        - '[]'
        - '["", "hello"]'
    negative:
        - 'null'
  - type: SetUuidAliasExample
    positive:
        - '[]'
        - '["d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"]'
    negative:
        - 'null'
  - type: SetAnyAliasExample
    positive:
        - '[]'
        - '[null, 0, "content", true, [1,2,3], {"key":3}]'
    negative:
        - 'null'
  - type: MapBearerTokenAliasExample
    positive:
        - '{}'
        - '{"abc123": true}'
    negative: []
  - type: MapBinaryAliasExample
    positive:
        - '{}'
        - '{"SGVsbG8sIFdvcmxk": true}'
    negative: []
  - type: MapBooleanAliasExample
    positive:
        - '{}'
        - '{"true": true}'
    negative: []
  - type: MapDateTimeAliasExample
    positive:
        - '{}'
        - '{"2017-01-02T03:04:05Z": true}'
    negative: []
  - type: MapDoubleAliasExample
    positive:
        - '{}'
        - '{"10": true}'
        - '{"10.0": true}'
        - '{"3e+2": true}'
        - '{"3e-2": true}'
        - '{"NaN": true}'
        - '{"Infinity": true}'
        - '{"-Infinity": true}'
        - '{"10": true, "3e2": true}'
    negative:
        - '{"10": true, "10e0": false}'
        - '{"10": true, "10.0": false}'
  - type: MapIntegerAliasExample
    positive:
        - '{}'
        - '{"0": true}'
        - '{"123": true}'
    negative: []
  - type: MapRidAliasExample
    positive:
        - '{}'
        - '{"ri.service.instance.folder.foo": true}'
    negative: []
  - type: MapSafeLongAliasExample
    positive:
        - '{}'
        - '{"-9007199254740991": true}'
        - '{"0": true}'
        - '{"9007199254740991": true}'
    negative: []
  - type: MapStringAliasExample
    positive:
        - '{}'
        - '{"": true}'
        - '{"hello": true}'
    negative: []
  - type: MapUuidAliasExample
    positive:
        - '{}'
        - '{"d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b": true}'
    negative: []
  - type: MapEnumExampleAlias
    positive:
        - '{"ONE": "", "TWO": ""}'
        - '{"ONE": "", "TWO": "", "BAD VARIANT": ""}'

singleHeaderParam:
- type: bearertoken
  positive:
    - '"bearertoken"'
- type: boolean
  positive:
    - 'true'
    - 'false'
- type: datetime
  positive:
    - '"2017-01-02T03:04:05Z"'
- type: double
  positive:
    - '10'
    - '10.0'
- type: integer
  positive:
    - '0'
    - '123'
- type: rid
  positive:
    - '"ri.service.instance.folder.foo"'
    - '"ri.a1p2p3.south-west.data-set.my-hello_WORLD-123"'
    - '"ri.my-service.instance1.graph-node.._"'
    - '"ri.service.1instance.type.emptyname"'
    - '"ri.my-service..graph-node.noInstance"'
    - '"ri.my-service..graph-node.noInstance.multiple.extra.dots"'
- type: safelong
  positive:
    - '-9007199254740991'
    - '0'
    - '9007199254740991'
- type: string
  positive:
    - '""'
    - '"hello"'
- type: uuid
  positive:
    - '"d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"' # UUID v1
    - '"80e6dd13-5f42-4e33-ad18-f73875540c8b"' # UUID v4
- type: optional<string>
  positive:
    - 'null'
    - '"foo"'
- type: AliasString
  positive:
    - '""'
    - '"hello"'
- type: EnumExample
  positive:
    - '"ONE"'
    - '"TWO"'
    - '"ONE_HUNDRED"'
    - '"UNKNOWN_VARIANT"'

singlePathParam:
- type: boolean
  positive:
    - 'true'
    - 'false'
- type: datetime
  positive:
    - '"2017-01-02T03:04:05Z"'
- type: double
  positive:
    - '10'
    - '10.0'
- type: integer
  positive:
    - '0'
    - '123'
- type: rid
  positive:
    - '"ri.service.instance.folder.foo"'
    - '"ri.a1p2p3.south-west.data-set.my-hello_WORLD-123"'
    - '"ri.my-service.instance1.graph-node.._"'
    - '"ri.service.1instance.type.emptyname"'
    - '"ri.my-service..graph-node.noInstance"'
    - '"ri.my-service..graph-node.noInstance.multiple.extra.dots"'
- type: safelong
  positive:
    - '-9007199254740991'
    - '0'
    - '9007199254740991'
- type: string
  positive:
    - '""'
    - '"hello"'
- type: uuid
  positive:
    - '"d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"' # UUID v1
    - '"80e6dd13-5f42-4e33-ad18-f73875540c8b"' # UUID v4
- type: AliasString
  positive:
    - '""'
    - '"hello"'
- type: EnumExample
  positive:
    - '"ONE"'
    - '"TWO"'
    - '"ONE_HUNDRED"'
    - '"UNKNOWN_VARIANT"'

singleQueryParam:
- type: boolean
  positive:
    - 'true'
    - 'false'
  # TODO(dfox): this should definitely be allowed!
  # queryParamDatetime:
  #   - '"2017-01-02T03:04:05Z"'
- type: double
  positive:
    - '10'
    - '10.0'
- type: integer
  positive:
    - '0'
    - '123'
- type: rid
  positive:
    - '"ri.service.instance.folder.foo"'
    - '"ri.a1p2p3.south-west.data-set.my-hello_WORLD-123"'
    - '"ri.my-service.instance1.graph-node.._"'
    - '"ri.service.1instance.type.emptyname"'
    - '"ri.my-service..graph-node.noInstance"'
    - '"ri.my-service..graph-node.noInstance.multiple.extra.dots"'
- type: safelong
  positive:
    - '-9007199254740991'
    - '0'
    - '9007199254740991'
- type: string
  positive:
    - '""'
    - '"hello"'
- type: uuid
  positive:
    - '"d6ddc1ac-3c1b-11e8-b467-0ed5f89f718b"' # UUID v1
    - '"80e6dd13-5f42-4e33-ad18-f73875540c8b"' # UUID v4
- type: optional<string>
  positive:
    - 'null'
    - '"foo"'
- type: AliasString
  positive:
    - '""'
    - '"hello"'
- type: EnumExample
  positive:
    - '"ONE"'
    - '"TWO"'
    - '"ONE_HUNDRED"'
    - '"UNKNOWN_VARIANT"'
