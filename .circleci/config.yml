restore_registry: &RESTORE_REGISTRY
  restore_cache:
    key: registry-v1-{{ arch }}-
save_registry: &SAVE_REGISTRY
  save_cache:
    key: registry-v1-{{ arch }}-{{ .BuildNum }}
    paths:
    - ~/.cargo/registry/index
deps_key: &DEPS_KEY
  key: deps-v1-{{ arch }}-{{ checksum "~/rust-version" }}-{{ checksum "Cargo.lock" }}
restore_deps: &RESTORE_DEPS
  restore_cache:
    <<: *DEPS_KEY
save_deps: &SAVE_DEPS
  save_cache:
    <<: *DEPS_KEY
    paths:
    - target
    - ~/.cargo/registry/cache
restore_rustup: &RESTORE_RUSTUP
  restore_cache:
    key: rustup-v2-{{ arch }}-{{ checksum "/tmp/rust-toolchain" }}
save_rustup: &SAVE_RUSTUP
  save_cache:
    key: rustup-v2-{{ arch }}-{{ checksum "/tmp/rust-toolchain" }}
    paths:
    - ~/.rustup
    - ~/.cargo/bin


version: 2
jobs:

  cargo-build-linux:
    docker:
    - image: circleci/rust:1.29.2
    environment:
      RUSTFLAGS: -D warnings
    steps:
    - checkout
    - run: rustc --version > ~/rust-version
    - *RESTORE_REGISTRY
    - *RESTORE_DEPS
    - run: rustup component add rustfmt-preview
    - run: cargo fmt --all -- --check
    - attach_workspace: { at: . } # need the compiled conjure IR from `gradle-build`
    - run: cargo test && cargo build --release
    - *SAVE_DEPS
    - *SAVE_REGISTRY
    - persist_to_workspace:
        root: .
        paths:
          - ./target/release/conjure-verification-server
          - ./target/release/conjure-verification-client

  publish-docker:
    docker:
    - image: circleci/openjdk:8u171-jdk
    steps:
    - setup_remote_docker
    - checkout
    - restore_cache:
        key: gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
    - restore_cache:
        key: gradle-cache-v2-{{ checksum "build.gradle" }}
    - run: ./gradlew compileTestCasesJson
    - attach_workspace: { at: . } # this gets the release binary from the 'cargo-build-linux' job
    - run: ./scripts/docker_build.sh
    - run: docker run palantirtechnologies/conjure-verification-server:$(git describe --tags --always --first-parent) --help
    - run: docker run palantirtechnologies/conjure-verification-client:$(git describe --tags --always --first-parent) --help
    - deploy:
        command: |
          if [[ "${CIRCLE_BRANCH}" == "develop" || "${CIRCLE_TAG}" =~ [0-9]+(\.[0-9]+)+(-[a-zA-Z]+[0-9]*)* ]]; then
            docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
            docker push palantirtechnologies/conjure-verification-server:$(git describe --tags --always --first-parent)
            docker push palantirtechnologies/conjure-verification-server:latest
            docker push palantirtechnologies/conjure-verification-client:$(git describe --tags --always --first-parent)
            docker push palantirtechnologies/conjure-verification-client:latest
          fi

  cargo-build-osx:
    macos:
      xcode: "9.2.0"
    environment:
      GRADLE_OPTS: -Dorg.gradle.console=plain -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false
      FL_OUTPUT_DIR: output
      RUST_CHANNEL: 1.29.2
      TARGET: x86_64-apple-darwin
    steps:
    - checkout
    - run:
        name: 'Add ~/.cargo/bin to the PATH'
        command: echo 'export PATH="~/.cargo/bin:$PATH"' | tee -a $BASH_ENV
    - run: echo "$RUST_CHANNEL-$TARGET" > /tmp/rust-toolchain
    - *RESTORE_RUSTUP
    - run:
        name: Install rustup
        command: |
          if [[ ! -e ~/.cargo/bin/rustup ]]; then
             curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path --default-toolchain none -y
          fi
    - run: rustup default $(cat /tmp/rust-toolchain)
    - *SAVE_RUSTUP
    - run: rustc --version > ~/rust-version
    - *RESTORE_REGISTRY
    - *RESTORE_DEPS
    - run: cargo build --target $TARGET --release
    - *SAVE_DEPS
    - *SAVE_REGISTRY
    - persist_to_workspace:
        root: .
        paths:
          - ./target/x86_64-apple-darwin/release/conjure-verification-server
          - ./target/x86_64-apple-darwin/release/conjure-verification-client
    - store_artifacts:
        path: ./target/x86_64-apple-darwin/release/conjure-verification-server
    - store_artifacts:
        path: ./target/x86_64-apple-darwin/release/conjure-verification-client

  publish:
    docker:
      - image: circleci/openjdk:8u171-jdk
    steps:
      - checkout
      - attach_workspace: { at: . }
      - restore_cache:
          key: gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-v2-{{ checksum "build.gradle" }}
      - deploy:
          command: |
            if [[ "${CIRCLE_TAG}" =~ [0-9]+(\.[0-9]+)+(-[a-zA-Z]+[0-9]*)* ]]; then
              ./gradlew --stacktrace --continue publish
            fi

  gradle-build:
    docker:
      - image: circleci/openjdk:8u171-jdk-node-browsers
    steps:
      - checkout
      - restore_cache:
          key: gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-v2-{{ checksum "build.gradle" }}
      - run: ./gradlew --parallel build
      - save_cache:
          key: gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - ~/.gradle/wrapper
      - save_cache:
          key: gradle-cache-v2-{{ checksum "build.gradle" }}
          paths:
            - ~/.gradle/caches
      - store_artifacts:
          path: ~/poms
      - persist_to_workspace:
          root: .
          paths:
            - ./*/build/
            - ./verification-client-api/src/main/conjure/generated
            - ./verification-server-api/src/main/conjure/generated

  markdown:
    docker:
      - image: iamdanfox/docker-liche:latest
    steps:
      - checkout
      - run: liche -d . -r . -v

workflows:
  version: 2
  build:
    jobs:
      - markdown:
          filters:
            tags:
              only: /.*/
      - cargo-build-linux:
          filters: { tags: { only: /.*/ } }
          requires:
            - gradle-build
      - cargo-build-osx:
          filters: { tags: { only: /.*/ } }
      - gradle-build:
          filters: { tags: { only: /.*/ } }
      - publish-docker:
          requires:
            - cargo-build-linux
          filters: { tags: { only: /.*/ } }
      - publish:
          requires:
            - cargo-build-linux
            - cargo-build-osx
            - gradle-build
          filters: { branches: { ignore: /.*/ }, tags: { only: /.*/ } }
