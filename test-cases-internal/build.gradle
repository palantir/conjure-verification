apply plugin: 'com.palantir.conjure'
apply plugin: 'java-library'

dependencies {
    api 'com.fasterxml.jackson.core:jackson-databind'
    api project("${project.name}-objects")

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.palantir.conjure:conjure-core'
    implementation 'com.palantir.conjure.java.runtime:conjure-java-jackson-serialization'
    implementation 'com.google.guava:guava'
    implementation 'org.apache.commons:commons-lang3'

    runtimeOnly 'org.slf4j:slf4j-simple'

    modules {
        module 'javax.annotation:javax.annotation-api', {
            replacedBy('jakarta.annotation:jakarta.annotation-api', 'prefer the jakarta version')
        }
        module 'javax.ws.rs:javax.ws.rs-api', {
            replacedBy('jakarta.ws.rs:jakarta.ws.rs-api', 'prefer the jakarta version')
        }
        module 'org.glassfish.hk2.external:javax.inject', {
            replacedBy('javax.inject:javax.inject', 'prefer the javax version')
        }
    }
}

task generateClientServices(type: JavaExec) {
    main = "com.palantir.conjure.verification.GenerateClientServices"
    classpath = sourceSets.main.runtimeClasspath
    args rootProject.file('master-test-cases.yml'), '../verification-client-api/src/main/conjure/generated-client'
    inputs.file rootProject.file('master-test-cases.yml')
    outputs.dir '../verification-client-api/src/main/conjure/generated-client'
}

task generateServerServices(type: JavaExec) {
    main = "com.palantir.conjure.verification.GenerateServerServices"
    classpath = sourceSets.main.runtimeClasspath
    args rootProject.file('master-test-cases.yml'), '../verification-server-api/src/main/conjure/generated-server'
    inputs.file rootProject.file('master-test-cases.yml')
    outputs.dir '../verification-server-api/src/main/conjure/generated-server'
}

task generate {
    dependsOn generateClientServices
    dependsOn generateServerServices
}
